FORMAT: 1A
HOST: https://api.voisee.jp

# Voisee API

## Authentication

All request, except login and registration need authentication.
Request need to be signed to perform authentication.

The server side implementation is available at

https://github.com/claudetech/ruby-simple-api-auth

Note: '\n' is used as the new line delimiter

Given a POST request to

```
http://api.voisee.jp/a path?q=some query
```

with the following payload

```json
{"seen": true}
```

and the secret key: MY_SECRET_KEY, the request should be signed in the following way:

### Create a canonical request

Create an empty string and then

1. Append the downcased HTTP method (e.g. post), and append a new line delimiter
2. Append the URI encoded URL, without the query parameters (e.g. https://api.voisee.jp/a%20path) and append a new line delimiter
3. Append the URI encoded query string (e.g. q=some%20query) and append a new line delimiter
4. Hash the payload using SHA1 algorithm, encode the result as an hexadecimal string, and append the final result

### Create a string to sign

1. Create string with the current time in the iso8601 format, and append a new line
2. Hash the canonical request using the SHA1 algorithm, encode the result as an hexadecimal string and append it to the string

### Create a signing key

1. Concatenate 'saa' and the secret key
  -> saaMY_SECRET_KEY
2. Format the current time with the format: %Y%m%d
3. Use the key generated in 1. to sign 2. using HMAC with the SHA1 algorithm

### Generate the signature

1. Sign the string to sign with the signing key using HMAC with the SHA1 algorithm.
2. Encode the result to an hexadecimal string

### Add the needed headers

* Add the `SAA-Auth-Time` header containing the current time in the iso8601 format
* Add the `Authorization` header with `Signature: SIGNATURE` where SIGNATURE is the generated signature.

## Roles

There are three different roles:

* Store group
    * Owns an application
    * Can manage own application
    * Can manage all stores in a store group

* Store
    * Belongs to a store group
    * Do not own application
    * Can manage store page in store group application
    * Can upgrade/downgrade store plan

* User
    * Does not belong to a store group
    * Owns an application
    * Can manage own application
    * Can upgrade/downgrade plan

## Media Types

When applicable, this API returns JSON encoded
objects or arrays.
A list action will always return a JSON array,
while a get action will always return a JSON object.

## Pagination

All endpoints returning list accept the following parameters:

* min_id (optional, integer) ... The minimum ID to return. Default: `null`
* max_id (optional, integer) ... The maximum ID to return. Default: `null`
* count (optional, integer) ... The number of items to return. Default: `20`

All paginated responses contain the `X-Total-Count` header.

## Error States

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

## Payment

All payments will use [WebPay](https://webpay.jp/).

# Group Store Group

A group of store representing either a mall, or a commercial district.


## Store group [/store_groups/{id}]

Requires Store group role.


### Get store group [GET]

Get information about the store group.

+ Response 200
    + Body

        ```json
        {
            "id": 1,
            "name": "某商店街"
        }
        ```

## Stores [/store_groups/{id}/stores]

### List stores [GET]

List all approved stores in the store group.
Requires Store group role.

+ Response 200
    + Body

        ```json
        [
            {
                "id": 1,
                "name": "Toranoko",
                "approved": true,
                "created_at": "2015-04-27T18:37:52+09:00",
                "updated_at": "2015-04-27T18:42:52+09:00"
            }
        ]
        ```

### Create store [POST]

Creates a store in the Store Group.
The store is not made public until the `stores/{id}/approve` API is called.

+ Request

    + Body

        ```json
        {
            "name": "Toranoko"
        }
        ```

+ Response 201

    [Store]

    + Body

        ```json
        {
            "id": 1,
            "name": "Toranoko",
            "approved": false,
            "created_at": "2015-04-27T18:37:52+09:00",
            "updated_at": "2015-04-27T18:42:52+09:00"
        }
        ```

# Group Store

## Approve store [/stores/{id}/approve]

Requires Store group role.

### Approve store [POST]

+ Response 204

## Store [/stores/{id}]

### Get a store [GET]

Requires Store group role or store role with `id` matching current store.

+ Response 200

    + Body

        ```json
        {
            "id": 1,
            "name": "Toranoko",
            "approved": true,
            "available_credit_card": false,
            "plan": {
                "id": 1,
                "type": "standard"
            }
            "created_at": "2015-04-27T18:37:52+09:00",
            "updated_at": "2015-04-27T18:42:52+09:00"
        }
        ```

### Update a store [PUT]

Requires store role.

+ Request

    + Body

        ```json
        {
            "name": "toranoko"
        }
        ```

+ Response 200

    + Body

        ```json
        {
            "id": 1,
            "name": "toranoko",
            "plan": {
                "id": 1,
                "type": "standard"
            },
            "created_at": "2015-04-27T18:37:52+09:00",
            "updated_at": "2015-04-27T18:42:52+09:00"
        }
        ```

## Store plan [/stores/{id}/plan]

### Update plan [PUT]

Updates the current pricing plan. Requires store role.
To upgrade to premium plan, credit card information is needed.

+ Request

    + Body

        ```json
        {
            "type": "premium"
        }
        ```

+ Response 204
