FORMAT: 1A
HOST: https://api.voisee.jp

# Voisee API

## Authentication

All request, except login and registration need authentication.
Request need to be signed to perform authentication.

Note: '\n' is used as the new line delimiter

Given a POST request to

http://api.voisee.jp/a path?q=some query

with the following payload

```json
{"seen": true}
```

and the secret key: MY_SECRET_KEY, the request should be signed in the following way:

### Create a canonical request

Create an empty string and then

1. Append the downcased HTTP method (e.g. post), and append a new line delimiter
2. Append the URI encoded URL, without the query parameters (e.g. https://api.voisee.jp/a%20path) and append a new line delimiter
3. Append the URI encoded query string (e.g. q=some%20query) and append a new line delimiter
4. Hash the payload using SHA1 algorithm, encode the result as an hexadecimal string, and append the final result

### Create a string to sign

1. Create string with the current time in the iso8601 format, and append a new line
2. Hash the canonical request using the SHA1 algorithm, encode the result as an hexadecimal string and append it to the string

### Create a signing key

1. Concatenate 'saa' and the secret key
  -> saaMY_SECRET_KEY
2. Format the current time with the format: %Y%m%d
3. Use the key generated in 1. to sign 2. using HMAC with the SHA1 algorithm

### Generate the signature

1. Sign the string to sign with the signing key using HMAC with the SHA1 algorithm.
2. Encode the result to an hexadecimal string

### Add the needed headers

* Add the `SSA-Auth-Time` header containing the current time in the iso8601 format
* Add the `Authorization` header with `Signature: SIGNATURE` where SIGNATURE is the generated signature.


## Media Types

When applicable, this API returns JSON encoded
objects or arrays.
A list action will always return a JSON array,
while a get action will always return a JSON object.

## Pagination

This API uses the following headers for pagination when applicable.

* `X-Total-Count`: the total number of entries for the given resource
* `Link`: headers for links as described by [RFC 5988](http://tools.ietf.org/html/rfc5988)

## Error States

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group Voices
Handle voices.

## Voice [/voices/{id}]
Interactions with a single voice

+ Parameters

    + id (required, integer, `4`) ... The voice ID

+ Model

    + Headers

            Content-Type: application/json

    + Body

        ```json
        {
            "id": 1,
            "company": {
                "id": 7,
                "name": "Toranoko"
            },
            "title": "Free wifi",
            "body": "Add free access wifi",
            "created_at": "2014-11-05T18:37:52+09:00",
            "created_at": "2014-11-05T18:42:52+09:00"
        }
        ```

### Get Voice [GET]
Get a single voice.

+ Response 200

    [Voice][]

### Update a Voice [PUT]
Update a single voice

+ Request

    [Voice][]

+ Response 200

    [Voice][]

### Delete a Voice [DELETE]
Delete a single note

+ Response 204

## Voice Collection [/voices{?company_id,sort,limit}]
API interacting with a collection of voices.


+ Model

    + Headers

            Content-Type: application/json

    + Body

        ```json
        [
            {
                "id": 1,
                "company": {
                    "id": 7,
                    "name": "Toranoko"
                },
                "title": "Free wifi",
                "body": "Add free access wifi"
            },
            {
                "id": 2,
                "company": {
                    "id": 2,
                    "name": "Rakuten"
                },
                "title": "Improve the design",
                "body": "This site is really hard to use"
            }
        ]
        ```

### Get Voices [GET]
Get a list of voices.

+ Parameters

    + company_id (optional, integer, `8`) ... Search voices for the company
    + sort = `updated_at` (optional, string, `created_at`) ... Which field to sort by
    + limit = `20` (optional, integer, `35`) ... The maximum number of voices to return, up to `50`

+ Response 200

    [Voice Collection][]

### Create New Voice [POST]
Create a new note

+ Request

    [Voice][]

+ Response 201

    [Voice][]

# Group Users
Group description

## User List [/users{?name,joinedBefore,joinedAfter,sort,limit}]
A list of users

+ Parameters

    + name (optional, string, `alice`) ... Search for a user by name
    + joinedBefore (optional, string, `2011-01-01`) ... Search by join date
    + joinedAfter (optional, string, `2011-01-01`) ... Search by join date
    + sort = `name` (optional, string, `joined`) ... Which field to sort by

        + Values
            + `name`
            + `joined`
            + `-joined`
            + `age`
            + `-age`
            + `location`
            + `-location`
            + `plan`
            + `-plan`

    + limit = `10` (optional, integer, `25`) ... The maximum number of users to return, up to `50`

+ Model

    + Headers

            Content-Type: application/json

    + Body

            [
                {
                    "name": "alice",
                    "image": "http://foo.com/alice.jpg",
                    "joined": "2013-11-01"
                },
                {
                    "name": "bob",
                    "image": "http://foo.com/bob.jpg",
                    "joined": "2013-11-02"
                }
            ]

    + Schema

            {
                "type": "array",
                "maxItems": 50,
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "image": {
                            "type": "string"
                        },
                        "joined": {
                            "type": "string",
                            "pattern": "\d{4}-\d{2}-\d{2}"
                        }
                    }
                }
            }

### Get users [GET]
Get a list of users. Example:

```no-highlight
https://api.mywebsite.com/users?sort=joined&limit=5
```

+ Response 200

    [User List][]

# Group Tags and Tagging Long Title
Get or set tags on notes

## GET /tags
Get a list of bars

+ Response 200

## Get one tag [/tags/{id}]
Get a single tag

### GET

+ Response 200
